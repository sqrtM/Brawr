#[derive(Debug)]
#[allow(dead_code)]
pub enum HttpErrorCode {
    BadRequest = 400,
    Unauthorized = 401,
    PaymentRequired = 402,
    Forbidden = 403,
    NotFound = 404,
    MethodNotAllowed = 405,
    NotAcceptable = 406,
    ProxyAuthenticationRequired = 407,
    RequestTimeout = 408,
    Conflict = 409,
    Gone = 410,
    LengthRequired = 411,
    PreconditionFailed = 412,
    PayloadTooLarge = 413,
    UriTooLong = 414,
    UnsupportedMediaType = 415,
    RangeNotSatisfiable = 416,
    ExpectationFailed = 417,
    ImATeapot = 418,
    MisdirectedRequest = 421,
    UnprocessableEntity = 422,
    Locked = 423,
    FailedDependency = 424,
    UpgradeRequired = 426,
    PreconditionRequired = 428,
    TooManyRequests = 429,
    RequestHeaderFieldsTooLarge = 431,
    UnavailableForLegalReasons = 451,
    InternalServerError = 500,
    NotImplemented = 501,
    BadGateway = 502,
    ServiceUnavailable = 503,
    GatewayTimeout = 504,
    HttpVersionNotSupported = 505,
    VariantAlsoNegotiates = 506,
    InsufficientStorage = 507,
    LoopDetected = 508,
    NotExtended = 510,
    NetworkAuthenticationRequired = 511,
}

#[allow(dead_code)]
impl HttpErrorCode {
    pub fn throw_error(&self) -> String {
        format!("Error {:#?}: {:#?}", self, self.get_message())
    }
    pub fn get_message(&self) -> &str {
        match self {
            HttpErrorCode::BadRequest => "Bad Request",
            HttpErrorCode::Unauthorized => "Unauthorized",
            HttpErrorCode::PaymentRequired => "Payment Required",
            HttpErrorCode::Forbidden => "Forbidden",
            HttpErrorCode::NotFound => "Not Found",
            HttpErrorCode::MethodNotAllowed => "Method Not Allowed",
            HttpErrorCode::NotAcceptable => "Not Acceptable",
            HttpErrorCode::ProxyAuthenticationRequired => "Proxy Authentication Required",
            HttpErrorCode::RequestTimeout => "Request Timeout",
            HttpErrorCode::Conflict => "Conflict",
            HttpErrorCode::Gone => "Gone",
            HttpErrorCode::LengthRequired => "Length Required",
            HttpErrorCode::PreconditionFailed => "Precondition Failed",
            HttpErrorCode::PayloadTooLarge => "Payload Too Large",
            HttpErrorCode::UriTooLong => "URI Too Long",
            HttpErrorCode::UnsupportedMediaType => "Unsupported Media Type",
            HttpErrorCode::RangeNotSatisfiable => "Range Not Satisfiable",
            HttpErrorCode::ExpectationFailed => "Expectation Failed",
            HttpErrorCode::ImATeapot => "I'm a teapot",
            HttpErrorCode::MisdirectedRequest => "Misdirected Request",
            HttpErrorCode::UnprocessableEntity => "Unprocessable Entity",
            HttpErrorCode::Locked => "Locked",
            HttpErrorCode::FailedDependency => "Failed Dependency",
            HttpErrorCode::UpgradeRequired => "Upgrade Required",
            HttpErrorCode::PreconditionRequired => "Precondition Required",
            HttpErrorCode::TooManyRequests => "Too Many Requests",
            HttpErrorCode::RequestHeaderFieldsTooLarge => "Request Header Fields Too Large",
            HttpErrorCode::UnavailableForLegalReasons => "Unavailable For Legal Reasons",
            HttpErrorCode::InternalServerError => "Internal Server Error",
            HttpErrorCode::NotImplemented => "Not Implemented",
            HttpErrorCode::BadGateway => "Bad Gateway",
            HttpErrorCode::ServiceUnavailable => "Service Unavailable",
            HttpErrorCode::GatewayTimeout => "Gateway Timeout",
            HttpErrorCode::HttpVersionNotSupported => "HTTP Version Not Supported",
            HttpErrorCode::VariantAlsoNegotiates => "Variant Also Negotiates",
            HttpErrorCode::InsufficientStorage => "Insufficient Storage",
            HttpErrorCode::LoopDetected => "Loop Detected",
            HttpErrorCode::NotExtended => "Not Extended",
            HttpErrorCode::NetworkAuthenticationRequired => "Network Authentication Required",
        }
    }
}